procedure dot_product(v1,v2:vecteurs)
variable
i :entier
p :reel
debut
pour i <-- 0 a n pas faire
p <-- p  + v1(i) * v2(i) 
fin pour
ecrire("afficher p")
fin
****************
function verif_orthogonal (t1,t2): boleen
var 
ortogonal:=0:integer;
begin
read_element (n:integer,var t1:array_of integer[100],t2:array_of integer[100])
ortogonal:=t1[i]*t2[i]
if(ortogonal=0)then
  return (true);  
elseif (ortogonal <> 0)then
return(false);
endif;
end
**************




Algorithm produitscalaire
var
v: array_of integer[100];
u: array_of integer[100];
i,n:integer;
ortogonal:boleen;


begin
//read size of elements
n:=read_size ();
//read elements
read_element(n,v,u);
//calcul produit scalaire
procedure calcul_ps (n:integer,var t1:array_of integer[100],t2:array_of integer[100]);
//verification
ortogonal:=verif_orthogonal (t1,t2);
end